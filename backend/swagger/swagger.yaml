
openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users like admin, superadmin, and faculty.


  components:
  schemas:
    Admission:
      type: object
      required:
        - prkey
        - firstName
        - lastName
        - fatherName
        - studentMobile
        - parentMobile
        - gender
        - dob
        - aadharCard
        - address
        - stream
        - course
        - category
        - subject12
        - year12
      properties:
        prkey:
          type: string
          example: PR123456
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        fatherName:
          type: string
          example: Richard Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        studentMobile:
          type: string
          example: "9876543210"
        parentMobile:
          type: string
          example: "9123456780"
        gender:
          type: string
          example: Male
        dob:
          type: string
          format: date
          example: 2000-01-01
        aadharCard:
          type: string
          example: "123456789012"
        address:
          type: string
          example: "123 Main St, City, State"
        stream:
          type: string
          example: Science
        course:
          type: string
          example: B.Sc
        category:
          type: string
          example: General
        subject12:
          type: string
          example: Physics
        year12:
          type: string
          example: "2018"
        percent12:
          type: string
          example: "85%"
        itegInterviewFlag:
          type: boolean
          example: false
        admissionStatus:
          type: boolean
          example: false
        admissionDate:
          type: string
          format: date
          example: 2025-04-25
        interviewStage:
          type: string
          enum:
            - Registered
            - Test Scheduled
            - Test not Attempted
            - Test Completed
            - First Interview Scheduled
            - First Interview Passed
            - Second Interview Scheduled
            - Second Interview Passed
            - ITEG Interview Completed
          example: Registered
        onlineTest:
          type: object
          properties:
            date:
              type: string
              format: date
              example: 2025-04-20
            testLink:
              type: string
              example: http://example.com/test
            result:
              type: string
              enum: [Pass, Fail, Pending, Not Attempted]
              example: Pending
        interviews:
          type: array
          items:
            type: object
            properties:
              round:
                type: string
                enum: [First, Second]
                example: First
              attemptNo:
                type: integer
                example: 1
              marks:
                type: number
                example: 85
              remark:
                type: string
                example: Good performance
              date:
                type: string
                format: date
                example: 2025-04-22
              result:
                type: string
                enum: [Pass, Fail, Pending]
                example: Pass
        scheduledInterview:
          type: object
          properties:
            date:
              type: string
              format: date
              example: 2025-04-25
            round:
              type: string
              enum: [First, Second]
              example: First
            isScheduled:
              type: boolean
              example: true

paths:
  /api/user/create:
    post:
      summary: Register a new user (admin/superadmin/faculty)
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - mobileNo
                - adharCard
                - department
                - position
                - role
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: Password123
                mobileNo:
                  type: string
                  example: "9876543210"
                adharCard:
                  type: string
                  example: "123456789012"
                department:
                  type: string
                  example: Computer Science
                position:
                  type: string
                  example: Assistant Professor
                role:
                  type: string
                  enum: [admin, superadmin, faculty]
                  example: faculty
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Faculty created successfully!
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 644a99999f73e02bcd123456
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      mobileNo:
                        type: string
                        example: "9876543210"
                      role:
                        type: string
                        example: faculty
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

        '400':
          description: User already exists or invalid role
        '500':
          description: Server Error

  /api/user/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: admin@ssism.org
                password:
                  type: string
                  format: password
                  example: admin@123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 644a99999f73e02bcd123456
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      role:
                        type: string
                        example: faculty
                      position:
                        type: string
                        example: Assistant Professor
                      department:
                        type: string
                        example: Computer Science

        '401':
          description: Invalid email or password
        '500':
          description: Server error


  /api/webhook/receive/data:
    post:
      summary: Receive and save student admission data
      description: Receives student admission data from a central system, verifies HMAC signature, and stores it in the database.
      tags:
        - Admission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentAdmission'
      parameters:
        - in: header
          name: x-webhook-signature
          schema:
            type: string
          required: true
          description: HMAC SHA256 signature for verifying webhook authenticity
      responses:
        '201':
          description: Student admission initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Student admission initiated
                  data:
                    $ref: '#/components/schemas/StudentAdmission'
        '200':
          description: Student already registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Student already registered
                  data:
                    $ref: '#/components/schemas/StudentAdmission'
        '401':
          description: Unauthorized - Invalid Signature
        '400':
          description: Bad Request
        '500':
          description: Internal Server Error

  /admissions/update-flag:
    put:
      summary: Update admission status flag
      tags:
        - Admissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - prkey
                - admissionStatus
              properties:
                prkey:
                  type: string
                  example: PR123456
                admissionStatus:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Admission status updated
        '400':
          description: Missing prkey or admissionStatus
        '404':
          description: Student not found
        '500':
          description: Server error

  /admissions/{studentId}/iteg-flag:
    post:
      summary: Update ITEG interview flag and notify central system
      tags:
        - Admissions
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
          description: ID of the student
      responses:
        '200':
          description: Interview flag updated and sent to central
        '404':
          description: Student not found
        '500':
          description: Server error

  /admissions/{id}/interviews:
    post:
      summary: Add a new interview round for a student
      tags:
        - Interviews
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - round
                - attemptNo
                - marks
                - remark
                - date
                - result
              properties:
                round:
                  type: string
                  enum: [First, Second]
                  example: First
                attemptNo:
                  type: integer
                  example: 1
                marks:
                  type: number
                  example: 85
                remark:
                  type: string
                  example: Good performance
                date:
                  type: string
                  format: date
                  example: 2025-04-25
                result:
                  type: string
                  enum: [Pass, Fail, Pending]
                  example: Pass
      responses:
        '201':
          description: Interview round added successfully
        '400':
          description: Validation error
        '404':
          description: Student not found
        '500':
          description: Server error

  /admissions/{id}/interviews:
    get:
      summary: Get all interviews for a student
      tags:
        - Interviews
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the student
      responses:
        '200':
          description: List of interviews
        '404':
          description: Student not found
        '500':
          description: Server error

  /admissions:
    get:
      summary: Get all student admissions
      tags:
        - Admissions
      responses:
        '200':
          description: List of all students
        '500':
          description: Failed to retrieve students


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
