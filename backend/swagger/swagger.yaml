openapi: 3.0.0
info:
  title: ITEG Management API
  description: API documentation for Admin, Students, Faculty, and Admission modules
  version: 1.0.0

servers:
  - url: http://localhost:5000/api
    description: Local Dev Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Admin:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        role:
          type: string

    Level:
      type: object
      required:
        - levelNo
      properties:
        levelNo:
          type: string
          example: "1"
        noOfAttempts:
          type: integer
          example: 1
        marks:
          type: number
          example: 80
        remark:
          type: string
          example: "Good performance"
        date:
          type: string
          format: date
          example: "2025-04-08"
        result:
          type: string
          enum: [Pass, Fail, Pending]
          example: "Pending"

    PlacedInfo:
      type: object
      properties:
        companyName:
          type: string
          example: "TechCorp"
        salary:
          type: number
          example: 600000
        location:
          type: string
          example: "Bangalore"

    Permission:
      type: object
      properties:
        reason:
          type: string
          example: "Medical leave"
        approvedBy:
          type: string
          enum: [Super Admin, Admin, Faculty]
          example: "Admin"

    InterviewRecord:
      type: object
      properties:
        companyName:
          type: string
          example: "Infosys"
        interviewDate:
          type: string
          format: date
          example: "2025-04-10"
        remark:
          type: string
          example: "Confident and well-prepared"
        result:
          type: string
          enum: [Selected, Rejected, Pending]
          example: "Selected"
        location:
          type: string
          example: "Mumbai"
        jobProfile:
          type: string
          example: "Software Engineer"

    Student:
      type: object
      required:
        - fullName
        - stream
        - course
        - fatherName
        - motherName
        - mobileNo
        - email
        - track
        - address
        - year
      properties:
        fullName:
          type: string
          example: "John Doe"
        stream:
          type: string
          example: "Science"
        course:
          type: string
          example: "BSc IT"
        fatherName:
          type: string
          example: "Mr. Doe"
        motherName:
          type: string
          example: "Mrs. Doe"
        mobileNo:
          type: string
          example: "9876543210"
        fatherNo:
          type: string
          example: "9876540000"
        email:
          type: string
          example: "john@example.com"
        track:
          type: string
          example: "Frontend"
        address:
          type: string
          example: "123 Main Street"
        year:
          type: string
          example: "2025"
        level:
          type: array
          items:
            $ref: '#/components/schemas/Level'
        techno:
          type: string
          example: "JavaScript"
        attendancePercentage:
          type: number
          example: 85
        placedInfo:
          $ref: '#/components/schemas/PlacedInfo'
        permission:
          type: boolean
          example: false
        interviewRecord:
          type: array
          items:
            $ref: '#/components/schemas/InterviewRecord'
        readinessStatus:
          type: string
          enum: [Ready, Not Ready]
          example: "Ready"


    Faculty:
      type: object
      properties:
        name:
          type: string
        subject:
          type: string

    components:
  
    Level:
      type: object
      properties:
        levelNo:
          type: string
        noOfAttempts:
          type: integer
        marks:
          type: number
        remark:
          type: string
        date:
          type: string
          format: date-time
        result:
          type: string
          enum: [Pass, Fail, Pending]
      required:
        - levelNo

security:
  - bearerAuth: []

paths:
  /superadmin/register:
    post:
      summary: Register a new Super Admin
      tags: [Super Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: Super Admin registered

  /superadmin/login:
    post:
      summary: Login as Super Admin
      tags: [Super Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful (returns JWT token)

  /superadmin/superadmin:
    get:
      summary: Get all Super Admins
      tags: [Super Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all Super Admins

  /superadmin/{id}:
    get:
      summary: Get Super Admin by ID
      tags: [Super Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Super Admin detail

  /admin:
    get:
      summary: Get all admins
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of admins
    post:
      summary: Create an admin
      tags: [Admin]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Admin created

  /admin/{id}:
    get:
      summary: Get admin by ID
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Admin detail
    put:
      summary: Update admin
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Admin updated
    delete:
      summary: Delete admin
      tags: [Admin]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Admin deleted

  /students/admitted:
    post:
      summary: Admit a new student
      tags: [Student]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Student admitted


  /students/getall:
    get:
      summary: Get all students
      tags: [Student]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of students

  /students/{id}:
    get:
      summary: Get student by ID
      tags: [Student]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Student detail
    delete:
      summary: Delete a student
      tags: [Student]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Student deleted

  /students/update/{id}:
    put:
      summary: Update student details
      tags: [Student]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Student updated

  /students/create/level/{id}:
    post:
      summary: Create a level record for a student
      tags: [Student]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Level'
      responses:
        '201':
          description: Level added successfully
          content:
           application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                  example: true
                message:
                  type: string
                  example: Level added successfully
                student:
                  $ref: '#/components/schemas/Student'
      '400':
        description: Missing level number
      '404':
        description: Student not found
      '500':
        description: Server error

  /students/student/level/{levelNo}:
    get:
      summary: Get students by level number
      tags: [Student]
      security:
        - bearerAuth: []
      parameters:
        - name: levelNo
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Students in level

  /students/total/student/{levelNo}:
    get:
      summary: Get total student count by level
      tags: [Student]
      security:
        - bearerAuth: []
      parameters:
        - name: levelNo
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Student count

  /students/getlevels/{id}:
    get:
      summary: Get all levels of a student
      tags: [Student]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Levels data

  /students/create/interviews/{id}:
    post:
      summary: Add interview record
      tags: [Student]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                interviewer:
                  type: string
                  example: John Doe
                date:
                  type: string
                  format: date
                  example: 2025-04-10
                remarks:
                  type: string
                  example: "Student showed excellent problem-solving skills"
                status:
                  type: string
                  enum: [Pending, Passed, Failed]
                  example: Passed
      responses:
        '201':
          description: Interview record added

  /students/interviews/{id}:
    get:
      summary: Get interview records by student ID
      tags: [Student]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Interview records

  /students/up/interviews/{id}:
    put:
      summary: Update interview result
      tags: [Student]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Interview result updated

  /faculty:
    get:
      summary: Get all faculties
      tags: [Faculty]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Faculty list
    post:
      summary: Create faculty
      tags: [Faculty]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Faculty created

  /faculty/{id}:
    get:
      summary: Get faculty by ID
      tags: [Faculty]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Faculty detail
    put:
      summary: Update faculty
      tags: [Faculty]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Faculty updated
    delete:
      summary: Delete faculty
      tags: [Faculty]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Faculty deleted

  /studentAdmission/admission-process:
    post:
      summary: Start student admission process
      tags: [Admission]
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Process started

  /studentAdmission/admission-dashboard:
    get:
      summary: Get admission dashboard
      tags: [Admission]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard data

