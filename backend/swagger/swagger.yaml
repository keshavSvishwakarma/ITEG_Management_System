
openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users like admin, superadmin, and faculty.


  components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "662b18b6c3eabc00123f5678"
        position:
          type: string
          example: "Developer"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "johndoe@example.com"
        adharCard:
          type: string
          example: "123456789012"
        password:
          type: string
          example: "$2b$10$somethinghashed"   # Password will be hashed
        role:
          type: string
          example: "admin"
        department:
          type: string
          example: "IT"
        refreshToken:
          type: string
          example: "some-refresh-token"
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-04-29T08:00:00.000Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-04-29T08:30:00.000Z"
    Admission:
      type: object
      required:
        - prkey
        - firstName
        - lastName
        - fatherName
        - studentMobile
        - parentMobile
        - gender
        - dob
        - aadharCard
        - address
        - stream
        - course
        - category
        - subject12
        - year12
      properties:
        prkey:
          type: string
          example: PR123456
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        fatherName:
          type: string
          example: Richard Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        studentMobile:
          type: string
          example: "9876543210"
        parentMobile:
          type: string
          example: "9123456780"
        gender:
          type: string
          example: Male
        dob:
          type: string
          format: date
          example: 2000-01-01
        aadharCard:
          type: string
          example: "123456789012"
        address:
          type: string
          example: "123 Main St, City, State"
        stream:
          type: string
          example: Science
        course:
          type: string
          example: B.Sc
        category:
          type: string
          example: General
        subject12:
          type: string
          example: Physics
        year12:
          type: string
          example: "2018"
        percent12:
          type: string
          example: "85%"
        itegInterviewFlag:
          type: boolean
          example: false
        admissionStatus:
          type: boolean
          example: false
        admissionDate:
          type: string
          format: date
          example: 2025-04-25
        interviewStage:
          type: string
          enum:
            - Registered
            - Test Scheduled
            - Test not Attempted
            - Test Completed
            - First Interview Scheduled
            - First Interview Passed
            - Second Interview Scheduled
            - Second Interview Passed
            - ITEG Interview Completed
          example: Registered
        onlineTest:
          type: object
          properties:
            date:
              type: string
              format: date
              example: 2025-04-20
            testLink:
              type: string
              example: http://example.com/test
            result:
              type: string
              enum: [Pass, Fail, Pending, Not Attempted]
              example: Pending
        interviews:
          type: array
          items:
            type: object
            properties:
              round:
                type: string
                enum: [First, Second]
                example: First
              attemptNo:
                type: integer
                example: 1
              marks:
                type: number
                example: 85
              remark:
                type: string
                example: Good performance
              date:
                type: string
                format: date
                example: 2025-04-22
              result:
                type: string
                enum: [Pass, Fail, Pending]
                example: Pass
        scheduledInterview:
          type: object
          properties:
            date:
              type: string
              format: date
              example: 2025-04-25
            round:
              type: string
              enum: [First, Second]
              example: First
            isScheduled:
              type: boolean
              example: true

paths:
  /api/user/signup:
    post:
      summary: Register a new user (admin/superadmin/faculty)
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - mobileNo
                - adharCard
                - department
                - position
                - role
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: Password123
                mobileNo:
                  type: string
                  example: "9876543210"
                adharCard:
                  type: string
                  example: "123456789012"
                department:
                  type: string
                  example: Computer Science
                position:
                  type: string
                  example: Assistant Professor
                role:
                  type: string
                  enum: [admin, superadmin, faculty]
                  example: faculty
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Faculty created successfully!
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 644a99999f73e02bcd123456
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      mobileNo:
                        type: string
                        example: "9876543210"
                      role:
                        type: string
                        example: faculty
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

        '400':
          description: User already exists or invalid role
        '500':
          description: Server Error

  /api/user/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: admin@ssism.org
                password:
                  type: string
                  format: password
                  example: admin@123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 644a99999f73e02bcd123456
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      role:
                        type: string
                        example: faculty
                      position:
                        type: string
                        example: Assistant Professor
                      department:
                        type: string
                        example: Computer Science

        '401':
          description: Invalid email or password
        '500':
          description: Server error

  /api/user/update/{id}:
    patch:
      tags:
        - Auth
      summary: Update user fields
      description: Update fields like position, role, department, isActive for a user by their ID.
      parameters:
        - name: id
          in: path
          required: true
          description: User ID to update
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                position:
                  type: string
                  example: "Senior Developer"
                role:
                  type: string
                  example: "admin"
                department:
                  type: string
                  example: "IT"
                isActive:
                  type: boolean
                  example: true
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User updated successfully"
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Invalid request data
        404:
          description: User not found
        500:
          description: Server error

  /api/admission/create/Interview/{id}:
  post:
    tags:
      - Admission Process
    summary: Add an interview round
    parameters:
      - name: id
        in: path
        required: true
        description: Student Admission ID
        schema:
          type: string
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              round:
                type: string
                example: "First"
              marks:
                type: integer
                example: 85
              remark:
                type: string
                example: "Strong technical skills"
              date:
                type: string
                format: date-time
                example: "2025-04-29T10:00:00Z"
              result:
                type: string
                enum: [Pass, Fail, Pending]
                example: "Pass"
    responses:
      '201':
        description: Interview added
        content:
          application/json:
            schema:
              type: object
              properties:
                success:
                  type: boolean
                message:
                  type: string
                student:
                  $ref: '#/components/schemas/AdmissionProcess'
      '400':
        description: Bad Request
      '404':
        description: Student Not Found
      '500':
        description: Server Error




 