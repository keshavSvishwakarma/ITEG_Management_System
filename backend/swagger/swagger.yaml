
openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users like admin, superadmin, and faculty.


  components:
  schemas:
    Admission:
      type: object
      required:
        - prkey
        - firstName
        - lastName
        - fatherName
        - studentMobile
        - parentMobile
        - gender
        - dob
        - aadharCard
        - address
        - stream
        - course
        - category
        - subject12
        - year12
      properties:
        prkey:
          type: string
          example: PR123456
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        fatherName:
          type: string
          example: Richard Doe
        email:
          type: string
          format: email
          example: john.doe@example.com
        studentMobile:
          type: string
          example: "9876543210"
        parentMobile:
          type: string
          example: "9123456780"
        gender:
          type: string
          example: Male
        dob:
          type: string
          format: date
          example: 2000-01-01
        aadharCard:
          type: string
          example: "123456789012"
        address:
          type: string
          example: "123 Main St, City, State"
        stream:
          type: string
          example: Science
        course:
          type: string
          example: B.Sc
        category:
          type: string
          example: General
        subject12:
          type: string
          example: Physics
        year12:
          type: string
          example: "2018"
        percent12:
          type: string
          example: "85%"
        itegInterviewFlag:
          type: boolean
          example: false
        admissionStatus:
          type: boolean
          example: false
        admissionDate:
          type: string
          format: date
          example: 2025-04-25
        interviewStage:
          type: string
          enum:
            - Registered
            - Test Scheduled
            - Test not Attempted
            - Test Completed
            - First Interview Scheduled
            - First Interview Passed
            - Second Interview Scheduled
            - Second Interview Passed
            - ITEG Interview Completed
          example: Registered
        onlineTest:
          type: object
          properties:
            date:
              type: string
              format: date
              example: 2025-04-20
            testLink:
              type: string
              example: http://example.com/test
            result:
              type: string
              enum: [Pass, Fail, Pending, Not Attempted]
              example: Pending
        interviews:
          type: array
          items:
            type: object
            properties:
              round:
                type: string
                enum: [First, Second]
                example: First
              attemptNo:
                type: integer
                example: 1
              marks:
                type: number
                example: 85
              remark:
                type: string
                example: Good performance
              date:
                type: string
                format: date
                example: 2025-04-22
              result:
                type: string
                enum: [Pass, Fail, Pending]
                example: Pass
        scheduledInterview:
          type: object
          properties:
            date:
              type: string
              format: date
              example: 2025-04-25
            round:
              type: string
              enum: [First, Second]
              example: First
            isScheduled:
              type: boolean
              example: true

paths:
  /api/user/create:
    post:
      summary: Register a new user (admin/superadmin/faculty)
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - mobileNo
                - adharCard
                - department
                - position
                - role
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: Password123
                mobileNo:
                  type: string
                  example: "9876543210"
                adharCard:
                  type: string
                  example: "123456789012"
                department:
                  type: string
                  example: Computer Science
                position:
                  type: string
                  example: Assistant Professor
                role:
                  type: string
                  enum: [admin, superadmin, faculty]
                  example: faculty
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Faculty created successfully!
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 644a99999f73e02bcd123456
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      mobileNo:
                        type: string
                        example: "9876543210"
                      role:
                        type: string
                        example: faculty
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

        '400':
          description: User already exists or invalid role
        '500':
          description: Server Error

  /api/user/login:
    post:
      summary: Login a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: admin@ssism.org
                password:
                  type: string
                  format: password
                  example: admin@123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 644a99999f73e02bcd123456
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        example: johndoe@example.com
                      role:
                        type: string
                        example: faculty
                      position:
                        type: string
                        example: Assistant Professor
                      department:
                        type: string
                        example: Computer Science

        '401':
          description: Invalid email or password
        '500':
          description: Server error


  /api/user/refresh-token:
    post:
      summary: Refresh JWT access token using a refresh token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Access token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Access token refreshed
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Refresh token required
        '403':
          description: Invalid or expired refresh token
        '500':
          description: Server error

  /api/otp/send-otp-email:
    post:
      summary: Send OTP to user email for login
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  example: user@example.com
      responses:
        '200':
          description: OTP sent to registered email
        '400':
          description: Email is required
        '404':
          description: User with this email does not exist
        '429':
          description: Maximum OTP request limit exceeded
        '500':
          description: Internal Server Error

  /api/otp/verify-otp-email:
    post:
      summary: Verify OTP and login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - otp
              properties:
                email:
                  type: string
                  example: user@example.com
                otp:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: OTP verified and login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  token:
                    type: string
                  refreshToken:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                      name:
                        type: string
                      email:
                        type: string
                      role:
                        type: string
                      position:
                        type: string
                      department:
                        type: string
        '400':
          description: Invalid or expired OTP / Email and OTP required
        '404':
          description: User not found
        '500':
          description: OTP verification failed

  /api/user/logout:
    post:
      summary: Logout user and remove refresh token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - _id
              properties:
                _id:
                  type: string
                  example: 661d2e3fa9a8cfbbd19cb123
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out successfully, refresh token removed
        '400':
          description: User ID is required
        '404':
          description: User not found
        '500':
          description: Server error





  