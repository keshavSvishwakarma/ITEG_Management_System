const mongoose = require("mongoose");

/* ============================== 🧩 COMMON SUB-SCHEMA ============================== */
// For storing subcategories like "Content & Structure", "Active Participation", etc.
const subCategorySchema = new mongoose.Schema({
  name: { type: String, required: true },
  value: { type: Boolean, default: false }, // true = checked/achieved
});

/* ============================== 🧩 SOFT SKILLS ============================== */
const softSkillCategorySchema = new mongoose.Schema({
  title: { type: String, required: true }, // e.g., "Presentation Skills"
  maxMarks: { type: Number, default: 10 },
  subcategories: { type: [subCategorySchema], default: [] },
  score: { type: Number, default: 0 }, // calculated score
});

const softSkillsSchema = new mongoose.Schema({
  sectionTitle: { type: String, default: "Soft Skills Evaluation (50 Marks)" },
  categories: { type: [softSkillCategorySchema], default: [] },
  totalSoftSkillMarks: { type: Number, default: 0 },
});

/* ============================== ⚙️ DISCIPLINE ============================== */
const disciplineCategorySchema = new mongoose.Schema({
  title: { type: String, required: true }, // e.g., "Attendance"
  maxMarks: { type: Number, default: 10 },
  subcategories: { type: [subCategorySchema], default: [] },
  score: { type: Number, default: 0 },
});

const disciplineSchema = new mongoose.Schema({
  sectionTitle: { type: String, default: "Discipline Evaluation (30 Marks)" },
  categories: { type: [disciplineCategorySchema], default: [] },
  totalDisciplineMarks: { type: Number, default: 0 },
});

/* ============================== 💻 TECHNICAL SKILLS ============================== */
const technicalSkillSchema = new mongoose.Schema({
  skillName: { type: String, required: true }, // e.g., React, Git, Node.js
  theoryMarks: { type: Number, default: 0 },
  practicalMarks: { type: Number, default: 0 },
  totalPercentage: { type: Number, default: 0 },
  remark: { type: String, default: "" },
});
const coCurricular = new mongoose.Schema({
  category: { type: String, required: true },
  title:{ type:String, require: true },
  remark:{type:String, require: true} // e.g., Sports, Arts
});
/* ============================== 💼 CAREER READINESS ============================== */
const careerReadinessSchema = new mongoose.Schema({
  resumeStatus: {
    type: String,
    enum: ["Uploaded", "Not Uploaded"],
    default: "Not Uploaded",
  },
  linkedinStatus: {
    type: String,
    enum: ["Not Created", "Need Improvement", "Up-to-date"],
    default: "Not Created",
  },
  aptitudeStatus: {
    type: String,
    enum: ["In-progress", "Done"],
    default: "In-progress",
  },
  placementReady: {
    type: String,
    enum: ["Ready", "Not Ready"],
    default: "Not Ready",
  },
});

/* ============================== 🎓 ACADEMIC PERFORMANCE ============================== */
const academicPerformanceSchema = new mongoose.Schema({
  yearWiseSGPA: [
    {
      year: String,
      sgpa: Number,
    },
  ],
  cgpa: { type: Number, default: 0 },
});

/* ============================== 🏆 CO-CURRICULAR ACTIVITIES ============================== */
const coCurricularSchema = { type: [coCurricular], default: [] };

/* ============================== 🧾 MAIN REPORT CARD SCHEMA ============================== */
const StudentReportCardSchema = new mongoose.Schema(
  {
    studentRef: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "AdmittedStudent",
      required: true,
      unique: true
    },
    batchYear: { type: String, required: true },

    // Generated By (Faculty/Admin)
    
    generatedByName: { type: String, required: true },
   

    // 🧠 Soft Skills
    softSkills: { type: softSkillsSchema, default: () => ({}) },

    // ⚙️ Discipline
    discipline: { type: disciplineSchema, default: () => ({}) },

    // 💻 Technical Skills
    technicalSkills: { type: [technicalSkillSchema], default: [] },

    // 💼 Career Readiness
    careerReadiness: { type: careerReadinessSchema, default: () => ({}) },

    // 🎓 Academic Performance
    academicPerformance: { type: academicPerformanceSchema, default: () => ({}) },

    // 🏆 Co-Curricular Achievements
    coCurricular: coCurricularSchema,

    // 📊 Remarks & Status
    overallGrade: { type: String, default: "" },
    facultyRemark: { type: String, default: "" },
    isFinalReport: { type: Boolean, default: false },
  },
  { timestamps: true }
);

module.exports = mongoose.model("StudentReportCard", StudentReportCardSchema);
